{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","listAllEntries","state","data","mapedData","map","ele","index","console","log","masterData","twitterData","twitter_id_str","pdfName","randomItemFormatted","source_filenamepdf","iframeLink","concat","react_default","a","createElement","className","key","source_publishedin","source_lieu","iframe","url","width","height","display","position","index_es","tweetId","listOnlyTweets","twittedData","twitter_id","twitter_text","twitter_created_at","renderCorrectView","value","chatSection","change","event","setState","target","filterSection","onChange","placeholder","_this2","fetch","then","res","json","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27025c93.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\nimport Iframe from 'react-iframe'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n      value: \"both\"\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:5000/main-data')\n      .then(res => res.json())\n      .then(data => this.setState({ data }));\n  }\n\n  listAllEntries = () => {\n    if(!this.state.data){\n      return (\n        <div>loading</div>\n      )\n    }else{\n      const data = this.state.data;\n      const mapedData = data\n      .map((ele, index) => {\n        console.log(ele.masterData.twitterData.twitter_id_str);\n        const pdfName = ele.masterData.randomItemFormatted.source_filenamepdf;\n        const iframeLink = `https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1560226145/franklin_ford/${pdfName}`;\n        return (\n          <div\n            className=\"entries_cell\"key={index}>\n            <hr />\n              <span className=\"span_title\">1 -- Input/Source of the generated data: </span>\n              <h1><span>Published in:</span> {ele.masterData.randomItemFormatted.source_publishedin}</h1>\n              <h1><span>Physical address: </span> {ele.masterData.randomItemFormatted.source_lieu}</h1>\n            <hr />\n              <span className=\"span_title\">2 -- File (PDF): </span>\n              <Iframe url={iframeLink}\n                width=\"450px\"\n                height=\"450px\"\n                display=\"initial\"\n                position=\"relative\"\n              />\n              <hr />\n            <span className=\"span_title\">2 -- Generated Tweet: </span>\n              <div className=\"centerContent\">\n              <div className=\"selfCenter\">\n                <TwitterTweetEmbed\n                  tweetId={ele.masterData.twitterData.twitter_id_str}\n                />\n                </div>\n              </div>\n          </div>\n        )\n      })\n      console.log(mapedData);\n      return (\n        <section className=\"main_data_section\">\n          {mapedData}\n        </section>\n      )\n    }\n  }\n\n  listOnlyTweets = () => {\n    if(!this.state.data){\n      return (\n        <div>loading</div>\n      )\n    }else{\n      const data = this.state.data;\n      const mapedData = data\n      .map((ele, index) => {\n        return (\n          <div className=\"entries_cell\"key={index}>\n            <h1>{ele.masterData.twittedData.twitter_id}</h1>\n            <h1>{ele.masterData.twittedData.twitter_text}</h1>\n            <h1>{ele.masterData.twittedData.twitter_created_at}</h1>\n          </div>\n        )\n      })\n      return (\n        <section className=\"main_data_section\">\n          {mapedData}\n        </section>\n      )\n    }\n  }\n\n\n  renderCorrectView = () => {\n    if(this.state.value === \"both\"){\n      return this.listAllEntries();\n    }else if(this.state.value === \"reddit\"){\n      return;\n    }else if(this.state.value === \"tweets\"){\n      return this.listOnlyTweets();\n    }\n  }\n\n  chatSection = () => {\n    return (\n      <section className=\"chat_section\">\n        <div>\n          <h1>Dialogflow bot...</h1>\n          <input />\n        </div>\n      </section>\n    )\n  }\n\n  change = (event) => {\n       this.setState({\n         value: event.target.value\n       });\n   }\n\n  filterSection = () => {\n    return (\n      <section className=\"filter_section\">\n      <select\n        onChange={this.change}\n        value={this.state.value}>\n        <option value=\"both\">Filter: both</option>\n        <option value=\"tweets\">Filter: Tweets</option>\n        <option value=\"reddit\">Filter: Reddit</option>\n      </select>\n      <select>\n        <option value=\"both\">Sort: random</option>\n        <option value=\"both\">Sort: ascending</option>\n        <option value=\"both\">Sort: descending</option>\n      </select>\n      <input placeholder={\"AUTOCOMPLETE...\"}/>\n      </section>\n    )\n  }\n\n  render() {\n    return(\n      <div>\n\n         {this.listAllEntries()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}